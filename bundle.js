/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
const score = document.getElementById('score');
const canvas = document.getElementById('game');
const bordersBtn = document.getElementById('borders-btn');
const bordersStateDisplay = document.getElementById('state-borders');
const context = canvas.getContext('2d');
const grid = 16;
let count = 0;
let gameSpeed = 4;
let applesEaten = 0;
let stateBorders = false;
const snake = {
    x: 160,
    y: 160,
    dx: grid,
    dy: 0,
    cells: [],
    maxCells: 4
};
const apple = {
    x: 320,
    y: 320
};
function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min)) + min;
}
function createApple() {
    apple.x = getRandomInt(0, 25) * grid;
    apple.y = getRandomInt(0, 25) * grid;
}
function restart() {
    snake.x = 160;
    snake.y = 160;
    snake.cells = [];
    snake.maxCells = 4;
    snake.dx = grid;
    snake.dy = 0;
    applesEaten = 0;
    score.textContent = applesEaten.toString();
    createApple();
}
function toggleBorders() {
    stateBorders = !stateBorders;
    if (stateBorders) {
        bordersStateDisplay.textContent = 'on';
        canvas.classList.add('borders_on');
        canvas.classList.remove('borders_off');
    }
    else {
        bordersStateDisplay.textContent = 'off';
        canvas.classList.add('borders_off');
        canvas.classList.remove('borders_on');
    }
    restart();
}
function loop() {
    requestAnimationFrame(loop);
    if (++count < gameSpeed)
        return;
    count = 0;
    context.clearRect(0, 0, canvas.width, canvas.height);
    snake.x += snake.dx;
    snake.y += snake.dy;
    if (snake.x < 0)
        stateBorders ? restart() : snake.x = canvas.width - grid;
    else if (snake.x >= canvas.width)
        stateBorders ? restart() : snake.x = 0;
    if (snake.y < 0)
        stateBorders ? restart() : snake.y = canvas.height - grid;
    else if (snake.y >= canvas.height)
        stateBorders ? restart() : snake.y = 0;
    snake.cells.unshift({ x: snake.x, y: snake.y });
    snake.cells.length > snake.maxCells && snake.cells.pop();
    context.fillStyle = 'red';
    context.fillRect(apple.x, apple.y, grid - 1, grid - 1);
    context.fillStyle = 'green';
    snake.cells.forEach((cell, index) => {
        context.fillRect(cell.x, cell.y, grid - 1, grid - 1);
        if (cell.x === apple.x && cell.y === apple.y) {
            snake.maxCells++;
            createApple();
            applesEaten++;
            score.textContent = applesEaten.toString();
        }
        for (let i = index + 1; i < snake.cells.length; i++) {
            if (cell.x === snake.cells[i].x && cell.y === snake.cells[i].y) {
                restart();
            }
        }
    });
}
document.addEventListener('keydown', (e) => {
    switch (e.which) {
        case 16:
            // Shift
            gameSpeed = 2;
            break;
        case 27:
            // Escape
            restart();
            break;
        case 37:
            // Стрелка влево
            if (snake.dx === 0) {
                snake.dx = -grid;
                snake.dy = 0;
            }
            break;
        case 38:
            // Стрелка вверх
            if (snake.dy === 0) {
                snake.dy = -grid;
                snake.dx = 0;
            }
            break;
        case 39:
            // Стрелка вправо
            if (snake.dx === 0) {
                snake.dx = grid;
                snake.dy = 0;
            }
            break;
        case 40:
            // Стрелка вниз
            if (snake.dy === 0) {
                snake.dy = grid;
                snake.dx = 0;
            }
            break;
    }
});
document.addEventListener('keyup', (e) => {
    if (e.which === 16) {
        gameSpeed = 4;
    }
});
bordersBtn.addEventListener('click', () => {
    toggleBorders();
});
requestAnimationFrame(loop);


/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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S0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFaEQsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLFFBQVEsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBRXpELE9BQU8sQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO0lBQzFCLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBRXZELE9BQU8sQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDO0lBRTVCLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFO1FBQ2xDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBRXJELElBQUksSUFBSSxDQUFDLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsRUFBRTtZQUM1QyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7WUFFakIsV0FBVyxFQUFFLENBQUM7WUFFZCxXQUFXLEVBQUUsQ0FBQztZQUNkLEtBQUssQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQzVDO1FBQ0QsS0FBSyxJQUFJLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNuRCxJQUFJLElBQUksQ0FBQyxDQUFDLEtBQUssS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsS0FBSyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDOUQsT0FBTyxFQUFFLENBQUM7YUFDWDtTQUNGO0lBQ0gsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsUUFBUSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO0lBQ3pDLFFBQVEsQ0FBQyxDQUFDLEtBQUssRUFBQztRQUNkLEtBQUssRUFBRTtZQUNMLFFBQVE7WUFDUixTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2QsTUFBTTtRQUNSLEtBQUssRUFBRTtZQUNMLFNBQVM7WUFDVCxPQUFPLEVBQUUsQ0FBQztZQUNWLE1BQUs7UUFDUCxLQUFLLEVBQUU7WUFDTCxnQkFBZ0I7WUFDaEIsSUFBSSxLQUFLLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRTtnQkFDbEIsS0FBSyxDQUFDLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQztnQkFDakIsS0FBSyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7YUFDZDtZQUNELE1BQU07UUFDUixLQUFLLEVBQUU7WUFDTCxnQkFBZ0I7WUFDaEIsSUFBSSxLQUFLLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRTtnQkFDbEIsS0FBSyxDQUFDLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQztnQkFDakIsS0FBSyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7YUFDZDtZQUNELE1BQU07UUFDUixLQUFLLEVBQUU7WUFDTCxpQkFBaUI7WUFDakIsSUFBSSxLQUFLLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRTtnQkFDbEIsS0FBSyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUM7Z0JBQ2hCLEtBQUssQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2FBQ2Q7WUFDRCxNQUFNO1FBQ1IsS0FBSyxFQUFFO1lBQ0wsZUFBZTtZQUNmLElBQUksS0FBSyxDQUFDLEVBQUUsS0FBSyxDQUFDLEVBQUU7Z0JBQ2xCLEtBQUssQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDO2dCQUNoQixLQUFLLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQzthQUNkO1lBQ0QsTUFBTTtLQUNUO0FBQ0gsQ0FBQyxDQUFDLENBQUM7QUFFSCxRQUFRLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7SUFDdkMsSUFBRyxDQUFDLENBQUMsS0FBSyxLQUFLLEVBQUUsRUFBRTtRQUNqQixTQUFTLEdBQUcsQ0FBQyxDQUFDO0tBQ2Y7QUFDSCxDQUFDLENBQUMsQ0FBQztBQUVILFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFO0lBQ3hDLGFBQWEsRUFBRTtBQUNqQixDQUFDLENBQUMsQ0FBQztBQUVILHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc25ha2Uvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vc25ha2Uvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9zbmFrZS8uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGUgcmVxdWlyZSBzY29wZVxudmFyIF9fd2VicGFja19yZXF1aXJlX18gPSB7fTtcblxuIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiaW1wb3J0IHsgSVNuYWtlLCBJQXBwbGUgfSBmcm9tIFwiLi9zbmFrZS50eXBlc1wiO1xuXG5jb25zdCBzY29yZSA9IDxIVE1MRWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2NvcmUnKTtcbmNvbnN0IGNhbnZhcyA9IDxIVE1MQ2FudmFzRWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2FtZScpO1xuY29uc3QgYm9yZGVyc0J0biA9IDxIVE1MQnV0dG9uRWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYm9yZGVycy1idG4nKTtcbmNvbnN0IGJvcmRlcnNTdGF0ZURpc3BsYXkgPSA8SFRNTEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0YXRlLWJvcmRlcnMnKTtcbmNvbnN0IGNvbnRleHQgPSA8Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEPmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuXG5jb25zdCBncmlkOiBudW1iZXIgPSAxNjtcbmxldCBjb3VudDogbnVtYmVyID0gMDtcbmxldCBnYW1lU3BlZWQ6IG51bWJlciA9IDQ7XG5sZXQgYXBwbGVzRWF0ZW46IG51bWJlciA9IDA7XG5sZXQgc3RhdGVCb3JkZXJzOiBib29sZWFuID0gZmFsc2U7XG5cbmNvbnN0IHNuYWtlOiBJU25ha2UgPSB7XG4gIHg6IDE2MCxcbiAgeTogMTYwLFxuICBkeDogZ3JpZCxcbiAgZHk6IDAsXG4gIGNlbGxzOiBbXSxcbiAgbWF4Q2VsbHM6IDRcbn1cblxuY29uc3QgYXBwbGU6IElBcHBsZSA9IHtcbiAgeDogMzIwLFxuICB5OiAzMjBcbn1cblxuZnVuY3Rpb24gZ2V0UmFuZG9tSW50KG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcik6IG51bWJlciB7XG4gIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluKSkgKyBtaW47XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUFwcGxlKCk6IHZvaWQge1xuICBhcHBsZS54ID0gZ2V0UmFuZG9tSW50KDAsIDI1KSAqIGdyaWQ7XG4gIGFwcGxlLnkgPSBnZXRSYW5kb21JbnQoMCwgMjUpICogZ3JpZDtcbn1cblxuZnVuY3Rpb24gcmVzdGFydCgpOiB2b2lkIHtcbiAgc25ha2UueCA9IDE2MDtcbiAgc25ha2UueSA9IDE2MDtcbiAgc25ha2UuY2VsbHMgPSBbXTtcbiAgc25ha2UubWF4Q2VsbHMgPSA0O1xuICBzbmFrZS5keCA9IGdyaWQ7XG4gIHNuYWtlLmR5ID0gMDtcblxuICBhcHBsZXNFYXRlbiA9IDA7XG4gIHNjb3JlLnRleHRDb250ZW50ID0gYXBwbGVzRWF0ZW4udG9TdHJpbmcoKTtcblxuICBjcmVhdGVBcHBsZSgpO1xufVxuXG5mdW5jdGlvbiB0b2dnbGVCb3JkZXJzKCkge1xuICBzdGF0ZUJvcmRlcnMgPSAhc3RhdGVCb3JkZXJzO1xuXG4gIGlmIChzdGF0ZUJvcmRlcnMpIHtcbiAgICBib3JkZXJzU3RhdGVEaXNwbGF5LnRleHRDb250ZW50ID0gJ29uJztcbiAgICBjYW52YXMuY2xhc3NMaXN0LmFkZCgnYm9yZGVyc19vbicpO1xuICAgIGNhbnZhcy5jbGFzc0xpc3QucmVtb3ZlKCdib3JkZXJzX29mZicpO1xuICB9IGVsc2Uge1xuICAgIGJvcmRlcnNTdGF0ZURpc3BsYXkudGV4dENvbnRlbnQgPSAnb2ZmJztcbiAgICBjYW52YXMuY2xhc3NMaXN0LmFkZCgnYm9yZGVyc19vZmYnKTtcbiAgICBjYW52YXMuY2xhc3NMaXN0LnJlbW92ZSgnYm9yZGVyc19vbicpO1xuICB9XG5cbiAgcmVzdGFydCgpO1xufVxuXG5mdW5jdGlvbiBsb29wKCk6IHZvaWQge1xuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUobG9vcCk7XG5cbiAgaWYgKCsrY291bnQgPCBnYW1lU3BlZWQpIHJldHVybjtcblxuICBjb3VudCA9IDA7XG5cbiAgY29udGV4dC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcblxuICBzbmFrZS54ICs9IHNuYWtlLmR4O1xuICBzbmFrZS55ICs9IHNuYWtlLmR5O1xuXG4gIGlmIChzbmFrZS54IDwgMCkgc3RhdGVCb3JkZXJzID8gcmVzdGFydCgpIDogc25ha2UueCA9IGNhbnZhcy53aWR0aCAtIGdyaWQ7XG4gIGVsc2UgaWYgKHNuYWtlLnggPj0gY2FudmFzLndpZHRoKSBzdGF0ZUJvcmRlcnMgPyByZXN0YXJ0KCkgOiBzbmFrZS54ID0gMDtcblxuICBpZiAoc25ha2UueSA8IDApIHN0YXRlQm9yZGVycyA/IHJlc3RhcnQoKSA6IHNuYWtlLnkgPSBjYW52YXMuaGVpZ2h0IC0gZ3JpZDtcbiAgZWxzZSBpZiAoc25ha2UueSA+PSBjYW52YXMuaGVpZ2h0KSBzdGF0ZUJvcmRlcnMgPyByZXN0YXJ0KCkgOiBzbmFrZS55ID0gMDtcblxuICBzbmFrZS5jZWxscy51bnNoaWZ0KHsgeDogc25ha2UueCwgeTogc25ha2UueSB9KTtcblxuICBzbmFrZS5jZWxscy5sZW5ndGggPiBzbmFrZS5tYXhDZWxscyAmJiBzbmFrZS5jZWxscy5wb3AoKTtcblxuICBjb250ZXh0LmZpbGxTdHlsZSA9ICdyZWQnO1xuICBjb250ZXh0LmZpbGxSZWN0KGFwcGxlLngsIGFwcGxlLnksIGdyaWQgLSAxLCBncmlkIC0gMSk7XG5cbiAgY29udGV4dC5maWxsU3R5bGUgPSAnZ3JlZW4nO1xuXG4gIHNuYWtlLmNlbGxzLmZvckVhY2goKGNlbGwsIGluZGV4KSA9PiB7XG4gICAgY29udGV4dC5maWxsUmVjdChjZWxsLngsIGNlbGwueSwgZ3JpZCAtIDEsIGdyaWQgLSAxKTtcblxuICAgIGlmIChjZWxsLnggPT09IGFwcGxlLnggJiYgY2VsbC55ID09PSBhcHBsZS55KSB7XG4gICAgICBzbmFrZS5tYXhDZWxscysrO1xuXG4gICAgICBjcmVhdGVBcHBsZSgpO1xuXG4gICAgICBhcHBsZXNFYXRlbisrO1xuICAgICAgc2NvcmUudGV4dENvbnRlbnQgPSBhcHBsZXNFYXRlbi50b1N0cmluZygpO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gaW5kZXggKyAxOyBpIDwgc25ha2UuY2VsbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChjZWxsLnggPT09IHNuYWtlLmNlbGxzW2ldLnggJiYgY2VsbC55ID09PSBzbmFrZS5jZWxsc1tpXS55KSB7XG4gICAgICAgIHJlc3RhcnQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGUpID0+IHtcbiAgc3dpdGNoIChlLndoaWNoKXtcbiAgICBjYXNlIDE2OlxuICAgICAgLy8gU2hpZnRcbiAgICAgIGdhbWVTcGVlZCA9IDI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI3OlxuICAgICAgLy8gRXNjYXBlXG4gICAgICByZXN0YXJ0KCk7XG4gICAgICBicmVha1xuICAgIGNhc2UgMzc6XG4gICAgICAvLyDQodGC0YDQtdC70LrQsCDQstC70LXQstC+XG4gICAgICBpZiAoc25ha2UuZHggPT09IDApIHtcbiAgICAgICAgc25ha2UuZHggPSAtZ3JpZDtcbiAgICAgICAgc25ha2UuZHkgPSAwO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzODpcbiAgICAgIC8vINCh0YLRgNC10LvQutCwINCy0LLQtdGA0YVcbiAgICAgIGlmIChzbmFrZS5keSA9PT0gMCkge1xuICAgICAgICBzbmFrZS5keSA9IC1ncmlkO1xuICAgICAgICBzbmFrZS5keCA9IDA7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM5OlxuICAgICAgLy8g0KHRgtGA0LXQu9C60LAg0LLQv9GA0LDQstC+XG4gICAgICBpZiAoc25ha2UuZHggPT09IDApIHtcbiAgICAgICAgc25ha2UuZHggPSBncmlkO1xuICAgICAgICBzbmFrZS5keSA9IDA7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDQwOlxuICAgICAgLy8g0KHRgtGA0LXQu9C60LAg0LLQvdC40LdcbiAgICAgIGlmIChzbmFrZS5keSA9PT0gMCkge1xuICAgICAgICBzbmFrZS5keSA9IGdyaWQ7XG4gICAgICAgIHNuYWtlLmR4ID0gMDtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICB9XG59KTtcblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCAoZSkgPT4ge1xuICBpZihlLndoaWNoID09PSAxNikge1xuICAgIGdhbWVTcGVlZCA9IDQ7XG4gIH1cbn0pO1xuXG5ib3JkZXJzQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICB0b2dnbGVCb3JkZXJzKClcbn0pO1xuXG5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUobG9vcCk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=
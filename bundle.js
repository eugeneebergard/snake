/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
const canvas = document.getElementById('game');
const context = canvas.getContext('2d');
const scoreCounter = document.getElementById('score__counter');
const modeButton = document.getElementById('mode');
const stateModeButton = document.getElementById('mode__state');
const grid = 16;
let count = 0;
let gameSpeed = 4;
let applesEaten = 0;
let modeWithBorders = false;
const snake = {
    x: 160,
    y: 160,
    dx: grid,
    dy: 0,
    cells: [],
    maxCells: 4
};
const apple = {
    x: 320,
    y: 320
};
function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min)) + min;
}
function createApple() {
    apple.x = getRandomInt(0, 25) * grid;
    apple.y = getRandomInt(0, 25) * grid;
}
function restart() {
    snake.x = 160;
    snake.y = 160;
    snake.cells = [];
    snake.maxCells = 4;
    snake.dx = grid;
    snake.dy = 0;
    applesEaten = 0;
    scoreCounter.textContent = applesEaten.toString();
    createApple();
}
function redrawGame(text, addClass, removeClass) {
    stateModeButton.textContent = text;
    canvas.classList.add(addClass);
    canvas.classList.remove(removeClass);
}
function toggleBorders() {
    modeWithBorders = !modeWithBorders;
    modeWithBorders ?
        redrawGame('on', 'borders_on', 'borders_off') :
        redrawGame('off', 'borders_off', 'borders_on');
    restart();
}
function loop() {
    requestAnimationFrame(loop);
    if (++count < gameSpeed)
        return;
    count = 0;
    context.clearRect(0, 0, canvas.width, canvas.height);
    snake.x += snake.dx;
    snake.y += snake.dy;
    if (snake.x < 0)
        modeWithBorders ? restart() : snake.x = canvas.width - grid;
    else if (snake.x >= canvas.width)
        modeWithBorders ? restart() : snake.x = 0;
    if (snake.y < 0)
        modeWithBorders ? restart() : snake.y = canvas.height - grid;
    else if (snake.y >= canvas.height)
        modeWithBorders ? restart() : snake.y = 0;
    snake.cells.unshift({ x: snake.x, y: snake.y });
    snake.cells.length > snake.maxCells && snake.cells.pop();
    context.fillStyle = 'red';
    context.fillRect(apple.x, apple.y, grid - 1, grid - 1);
    context.fillStyle = 'green';
    snake.cells.forEach((cell, index) => {
        context.fillRect(cell.x, cell.y, grid - 1, grid - 1);
        if (cell.x === apple.x && cell.y === apple.y) {
            snake.maxCells++;
            createApple();
            applesEaten++;
            scoreCounter.textContent = applesEaten.toString();
        }
        for (let i = index + 1; i < snake.cells.length; i++) {
            if (cell.x === snake.cells[i].x && cell.y === snake.cells[i].y) {
                restart();
            }
        }
    });
}
document.addEventListener('keydown', (e) => {
    switch (e.which) {
        case 16:
            // Shift
            gameSpeed = 2;
            break;
        case 27:
            // Escape
            restart();
            break;
        case 37:
            // Стрелка влево
            if (snake.dx === 0) {
                snake.dx = -grid;
                snake.dy = 0;
            }
            break;
        case 38:
            // Стрелка вверх
            if (snake.dy === 0) {
                snake.dy = -grid;
                snake.dx = 0;
            }
            break;
        case 39:
            // Стрелка вправо
            if (snake.dx === 0) {
                snake.dx = grid;
                snake.dy = 0;
            }
            break;
        case 40:
            // Стрелка вниз
            if (snake.dy === 0) {
                snake.dy = grid;
                snake.dx = 0;
            }
            break;
    }
});
document.addEventListener('keyup', (e) => {
    if (e.which === 16) {
        gameSpeed = 4;
    }
});
modeButton.addEventListener('click', () => {
    toggleBorders();
});
requestAnimationFrame(loop);


/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,